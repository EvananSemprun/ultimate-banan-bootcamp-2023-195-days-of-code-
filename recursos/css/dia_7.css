.wheel {
    border: 2px solid black;
    border-radius: 50%;
    margin-left: 50px;
    position: absolute;
    height: 55vw;
    width: 55vw;
    max-width: 500px;
    max-height: 500px;
    animation-name: wheel;
    /*
    
    La propiedad CSS animation-name especifica una lista de animaciones que se deben aplicar al elemento seleccionado. 
    Cada nombre indica un @keyframes esta regla define los valores de las propiedades de la secuencia de animación.

A menudo es conveniente utilizar la propiedad abrevieda animation para ajustar todas las propiedades de animación a la vez.
    
    */
    animation-duration: 10s;
    /*
    
    La propiedad CSS animation-duration indica la cantidad de tiempo que la animación tarda en completar un ciclo (duración).

El valor por defecto es 0s, que indica que la animación no debe producirse.

Es conveniente usar la propiedad abreviada animation para ajustar todas las propiedades de animación a la vez

<time>
El tiempo que tarda la animación en terminar su secuencia. Podemos especificarlo en segundos (usando s) o milisegundos (usando ms). 
Si no especificamos la unidad, la sentencia no será válida.
    
    */
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    /*
    
    La propiedad CSS animation-timing-function especifica cómo una animación CSS debe avanzar sobre la duración de cada ciclo. Los posibles valores son una o varias <timing-function> (en-US).

    Para animaciones con keyframes, la timing function se aplica entre los keyframes en lugar de sobre toda la animación. Es decir, se aplica al comienzo del keyframe y al final del mismo.

    Una timing function definida dentro de un keyframe afecta a ese keyframe. Si no está definida para el keyframe, se aplica la timing function para la animación en general.

    A menudo, es conveniente usar la propiedad abreviada animation para ajustar las propiedades de animación una sola vez.
        
    */
}

.line {
    background-color: black;
    width: 50%;
    height: 2px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: 0% 0%;
}

.line:nth-of-type(2) {
    transform: rotate(60deg);
    /*
    
    La pseudo-clase :nth-of-type() de CSS selecciona uno o más elementos de un tipo dado, en función de su posición entre un grupo de hermanos.

    /* Selecciona cada cuarto elementos <p> entre

    La pseudo-clase nth-of-type se especifica con un solo argumento, que representa el patrón para los elementos coincidentes.

    Ver :nth-child para una explicación más detallada de su sintaxis.
    
    */
}

.line:nth-of-type(3) {
    transform: rotate(120deg);
}

.line:nth-of-type(4) {
    transform: rotate(180deg);
}

.line:nth-of-type(5) {
    transform: rotate(240deg);
}

.line:nth-of-type(6) {
    transform: rotate(300deg);
}

.cabin {
    background-color: red;
    width: 20%;
    height: 20%;
    position: absolute;
    border: 2px solid;
    transform-origin: 50% 0%;
    animation: cabins 10s ease-in-out infinite;
}

.cabin:nth-of-type(1) {
    right: -8.5%;
    top: 50%;
}

.cabin:nth-of-type(2) {
    right: 17%;
    top: 93.5%;
}

.cabin:nth-of-type(3) {
    right: 67%;
    top: 93.5%;
}

.cabin:nth-of-type(4) {
    left: -8.5%;
    top: 50%;
}

.cabin:nth-of-type(5) {
    left: 17%;
    top: 7%;
}

.cabin:nth-of-type(6) {
    right: 17%;
    top: 7%;
}

@keyframes wheel {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

@keyframes cabins {
    0% {
        transform: rotate(0deg);
    }

    25% {
        background-color: yellow;
    }

    50% {
        background-color: purple;
    }

    75% {

        background-color: yellow;
    }

    100% {
        transform: rotate(-360deg);
    }
}